grammar CBOR_DIAG
  rule text
    ows a1:(value ows an:(',' ows value ows)*)? ows {
        def to_rb
          r = if e = a1.elements
            [e[0].to_rb] + e[2].elements.map {|x| x.value.to_rb }
          else
            []
          end
          if r.size == 1
            r.first
          else
            CBOR::Sequence.new(r)
          end
        end }
  end
  rule value
    string / map / array / tagged / hnumber / fnumber / infin / simple / hstring / bstring / b64string / appstring / embedded / streamstring
  end
  rule fnumber
    ip:([-+]? [0-9]+) dp:(('.' [0-9]+)?) ep:(([Ee] [-+]? [0-9]+)?) {
    def to_rb
      if dp.empty? && ep.empty?
        ip.text_value.to_i
      else
        (ip.text_value + dp.text_value + ep.text_value).to_f
      end
    end
    }
  end
  rule hnumber
    ip:([-+]? '0' ([xX] [0-9a-fA-F]+
                   / [oO] [0-7]+
                   / [bB] [01]+)) {
    def to_rb
      Integer(ip.text_value)
    end
    }
  end
  rule infin
    'Infinity' {def to_rb; Float::INFINITY end }
    /  '-Infinity' {def to_rb; -Float::INFINITY end }
    /  'NaN' {def to_rb; Float::NAN end }
  end
  rule simple
    'false' { def to_rb; false end }
    / 'true' { def to_rb; true end }
    / 'null' { def to_rb; nil end }
    / 'undefined' { def to_rb; CBOR::Simple.new(23) end }
    / 'simple(' ows value ows ')' { def to_rb; CBOR::Simple.new(value.to_rb) end }
  end
  rule tagged
    tag:([0-9]+) '(' ows value ows ')' {
      def to_rb
        CBOR::Tagged.new(tag.text_value.to_i, value.to_rb)
      end
    }
  end
  rule string
    '"' s:(string_part)* '"' { #'
            def to_rb
              s.elements.map(&:partval).join.force_encoding(Encoding::UTF_8)
            end
          }
  end
  rule string_part
    [^\\"\t]+ {def partval; text_value.gsub("\r", "").b end } #"
    / ("\\" s:(["\\/bfnrt]) { #"
          def partval
            v = s.text_value
            {"b" => "\b", "f" => "\f", "n" => "\n", "r" => "\r", "t" => "\t"}[v] || v
          end
        } )
    / ("\\u" s:([dD] [89abAB] [0-9a-fA-F] 2..2) "\\u" t:([dD] [cCdDeEfF] [0-9a-fA-F] 2..2) {
          def partval; (((s.text_value.to_i(16) & 0x3FF) << 10) +
                         (t.text_value.to_i(16) & 0x3FF) + 0x10000).chr(Encoding::UTF_8).b end
        } )
    / ("\\u" s:(([0-9abcefABCEF] [0-9a-fA-F] 3..3)
                / ([dD] [0-7] [0-9a-fA-F] 2..2) ) {
          def partval; s.text_value.to_i(16).chr(Encoding::UTF_8).b end
        } )
  end
  rule appstring
    a:([a-z] [a-z0-9]*) "'" s:(bstring_part)* "'" { #'
            def to_rb
              data = s.elements.map(&:partval).join.b
              app = a.text_value
              # Find a better place to put a default initialization
              CBOR_DIAG.const_set(:APPS, Hash.new { |h, k|
                h[k] = begin CBOR_DIAG.const_get("App_#{app}")
                       rescue NameError
                         raise ArgumentError.new("cbor-diagnostic: application-oriented extension #{k}'' unknown or not enabled")
                       end
              }) unless CBOR_DIAG.const_defined?(:APPS)
              CBOR_DIAG::APPS[app].decode(app, data)
            end
          }
  end
  rule bstring
    "'" s:(bstring_part)* "'" { #'
            def to_rb
              s.elements.map(&:partval).join.b
            end
          }
  end
  rule bstring_part
    [^\\'\t]+ {def partval; text_value.gsub("\r", "") end } #'
    / ("\\" s:(['\\/bfnrt]) {
          def partval
            v = s.text_value
            {"b" => "\b", "f" => "\f", "n" => "\n", "r" => "\r", "t" => "\t"}[v] || v
          end
        } )
    / ("\\u" s:([dD] [89abAB] [0-9a-fA-F] 2..2) "\\u" t:([dD] [cCdDeEfF] [0-9a-fA-F] 2..2) {
          def partval; (((s.text_value.to_i(16) & 0x3FF) << 10) +
                         (t.text_value.to_i(16) & 0x3FF) + 0x10000).chr(Encoding::UTF_8) end
        } )
    / ("\\u" s:(([0-9abcefABCEF] [0-9a-fA-F] 3..3)
                / ([dD] [0-7] [0-9a-fA-F] 2..2) ) {
          def partval; s.text_value.to_i(16).chr(Encoding::UTF_8) end
        } )
  end
  rule embedded
     "<<" s:text? ">>" {
            def to_rb
              if se = s
                sn = se.to_rb
                if CBOR::Sequence === sn
                  sn.to_cborseq
                else
                  CBOR.encode(sn)
                end
              else
                "".b
              end
            end
          }
  end
  rule hexdigit
    dig:([0-9a-fA-F]) {
      def sval; dig.text_value end
    }
  end
  rule twohex
    s1:hexdigit ows s2:hexdigit ows {
      def bval; (s1.sval << s2.sval).to_i(16).chr(Encoding::BINARY) end
    }
  end
  rule hstring                                # XXX: eat whitespace
    "h'" ows s:(twohex*) "'" { #"
             def to_rb;
               s.elements.map(&:bval).join.b
             end
           }
  end
  rule hbstring
    hstring / bstring
  end
  rule b64string
    "b64'" s:(([0-9a-zA-Z_\-+/\s])* ([=\s])*) "'" { #"
             def to_rb;
               t = s.text_value.gsub(/\s/, '').chars.each_slice(4).map(&:join)
               if last = t[-1]
                 last << "=" * (4 - last.size)
               end
               begin
                 t.join.tr("-_", "+/").unpack("m0")[0]
               rescue ArgumentError
                 raise ArgumentError.new("invalid base64 #{t}")
               end
             end
           }
  end
  rule array
    '[' spec a1:(value ows an:(',' ows value ows)*)? ows ']' {
        def to_rb
          r = if e = a1.elements
            [e[0].to_rb] + e[2].elements.map {|x| x.value.to_rb }
          else
            []
          end
          if spec.is_stream?
            r.cbor_stream!
          end
          r
        end }
  end
  rule map
    '{' spec a1:(kp ows an:(',' ows kp ows)*)? ows '}' {
      def to_rb
        r = if e = a1.elements
          Hash[ [e[0].to_rb] + e[2].elements.map {|x| x.kp.to_rb } ]
        else
          {}
        end
        if spec.is_stream?
          r.cbor_stream!
        end
        r
      end
    }
  end
  rule kp
    v1:value ows ":" ows v2:value {
      def to_rb
        [v1.to_rb, v2.to_rb]
      end
    }
  end
  rule ows
    [ \t\n\r]* ("/" [^/]* "/" [ \t\n\r]*)* {
      def sval; "" end
    }
  end
  rule streamstring
    '(' ows "_" ows a1:(string ows an:("," ows string ows)*) ')' {
       def to_rb
          r = if e = a1.elements
            [e[0].to_rb] + e[2].elements.map {|x| x.string.to_rb }
          else
            []
          end
          r.join.cbor_stream!(r.map(&:size))
       end
    }
    / '(' ows "_" ows a1:(hbstring ows an:("," ows hbstring ows)*) ')' {
       def to_rb
          r = if e = a1.elements
            [e[0].to_rb] + e[2].elements.map {|x| x.hbstring.to_rb }
          else
            []
          end
          r.join.b.cbor_stream!(r.map(&:size))
       end
    }
  end
  rule spec
    ows a1:("_")? ows {
      def is_stream?
        !a1.empty?
      end
    }
  end
end
